#include "RPILCM1602.h"

RPILCM1602::RPILCM1602()
		: rsPin(RS)
		, enPin(EN)
{
	// Init
	this->initPins();
	this->mode4bit = false;

	this->initDisplay();
}

RPILCM1602::~RPILCM1602()
{
	// Turn off the backlight
	this->setBacklight(0);
}
void RPILCM1602::initPins()
{
	backlight.push_back(new RPIGPIO(LR));
	backlight.push_back(new RPIGPIO(LG));
	backlight.push_back(new RPIGPIO(LB));

	dataInput.push_back(new RPIGPIO(DB7));
	dataInput.push_back(new RPIGPIO(DB6));
	dataInput.push_back(new RPIGPIO(DB5));
	dataInput.push_back(new RPIGPIO(DB4));
}

void RPILCM1602::setBacklight(int blBits)
{
	RPIGPIO::setBlock(backlight,~blBits);
}

void RPILCM1602::initDisplay()
{
	delay(200);

	this->mode4bit = false;

	this->command(CMD_FNSET_INIT >> 4,18);
	this->command(CMD_FNSET_INIT >> 4,7);
	this->command(CMD_FNSET_INIT >> 4,3);
	
	this->command(CMD_FNSET4_EN >> 4,7);

	this->mode4bit = true;

	this->command(CMD_FNSET4_SET,5);

	this->command(CMD_DISP_OFF);
	this->command(CMD_CLEAR);

	this->command(CMD_ENTMO_LR);

	this->command(CMD_DISP_ON);
}

void RPILCM1602::command(int data)
{
	this->command(data, 1);
}

void RPILCM1602::command(int data, int msDelay)
{
	if(mode4bit)
	{
		RPIGPIO::setBlock(this->dataInput,data >> 4);
		this->enPin.high();
		this->delay(1);
		this->enPin.low();
	}
	
	RPIGPIO::setBlock(this->dataInput,data);
	this->enPin.high();
	this->delay(1);	
	this->enPin.low();

	this->delay(msDelay);
}

void RPILCM1602::print(std::string text, int pos, int line)
{
	this->print(text.c_str(),pos,line,text.length());
}
void RPILCM1602::print(const char text[], int pos, int line, int length)
{
	this->command(CMD_MOVE + pos + (line * LINE_BREAK_POS));
	rsPin.high();
	for(int i = 0; i < length;i++)
	{
		this->command(text[i]);
	}
	rsPin.low();
}
void RPILCM1602::delay(int ms)
{
	std::this_thread::sleep_for(std::chrono::milliseconds(ms));
}


void RPILCM1602::buildCharset()
{
	LCM1602C_CHARSET[' '] = 0b00010000;
	LCM1602C_CHARSET['!'] = 0b00010001;
	LCM1602C_CHARSET['"'] = 0b00010010;
	LCM1602C_CHARSET['#'] = 0b00010011;
	LCM1602C_CHARSET['$'] = 0b00010100;
	LCM1602C_CHARSET['%'] = 0b00010101;
	LCM1602C_CHARSET['&'] = 0b00010110;
	LCM1602C_CHARSET['\''] =0b00010111;
	LCM1602C_CHARSET['('] = 0b00011000;
	LCM1602C_CHARSET[')'] = 0b00011001;
	LCM1602C_CHARSET['*'] = 0b00011010;
	LCM1602C_CHARSET['+'] = 0b00011011;
	LCM1602C_CHARSET[','] = 0b00011100;
	LCM1602C_CHARSET['-'] = 0b00011101;
	LCM1602C_CHARSET['.'] = 0b00011110;
	LCM1602C_CHARSET['/'] = 0b00011111;

	LCM1602C_CHARSET['0'] = 0b00110000;
	LCM1602C_CHARSET['1'] = 0b00110001;
	LCM1602C_CHARSET['2'] = 0b00110010;
	LCM1602C_CHARSET['3'] = 0b00110011;
	LCM1602C_CHARSET['4'] = 0b00110100;
	LCM1602C_CHARSET['5'] = 0b00110101;
	LCM1602C_CHARSET['6'] = 0b00110110;
	LCM1602C_CHARSET['7'] = 0b00110111;
	LCM1602C_CHARSET['8'] = 0b00111000;
	LCM1602C_CHARSET['9'] = 0b00111001;
	LCM1602C_CHARSET[':'] = 0b00111010;
	LCM1602C_CHARSET[';'] = 0b00111011;
	LCM1602C_CHARSET['<'] = 0b00111100;
	LCM1602C_CHARSET['='] = 0b00111101;
	LCM1602C_CHARSET['>'] = 0b00111110;
	LCM1602C_CHARSET['?'] = 0b00111111;

	LCM1602C_CHARSET['@'] = 0b01000000;
	LCM1602C_CHARSET['A'] = 0b01000001;
	LCM1602C_CHARSET['B'] = 0b01000010;
	LCM1602C_CHARSET['C'] = 0b01000011;
	LCM1602C_CHARSET['D'] = 0b01000100;
	LCM1602C_CHARSET['E'] = 0b01000101;
	LCM1602C_CHARSET['F'] = 0b01000110;
	LCM1602C_CHARSET['G'] = 0b01000111;
	LCM1602C_CHARSET['H'] = 0b01001000;
	LCM1602C_CHARSET['I'] = 0b01001001;
	LCM1602C_CHARSET['J'] = 0b01001010;
	LCM1602C_CHARSET['K'] = 0b01001011;
	LCM1602C_CHARSET['L'] = 0b01001100;
	LCM1602C_CHARSET['M'] = 0b01001101;
	LCM1602C_CHARSET['N'] = 0b01001110;
	LCM1602C_CHARSET['O'] = 0b01001111;

	LCM1602C_CHARSET['P'] = 0b01100000;
	LCM1602C_CHARSET['Q'] = 0b01100001;
	LCM1602C_CHARSET['R'] = 0b01100010;
	LCM1602C_CHARSET['S'] = 0b01100011;
	LCM1602C_CHARSET['T'] = 0b01100100;
	LCM1602C_CHARSET['U'] = 0b01100101;
	LCM1602C_CHARSET['V'] = 0b01100110;
	LCM1602C_CHARSET['W'] = 0b01100111;
	LCM1602C_CHARSET['X'] = 0b01101000;
	LCM1602C_CHARSET['Y'] = 0b01101001;
	LCM1602C_CHARSET['Z'] = 0b01101010;
	LCM1602C_CHARSET['['] = 0b01101011;
	//LCM1602C_CHARSET['¥'] = 0b01101100;
	LCM1602C_CHARSET[']'] = 0b01101101;
	LCM1602C_CHARSET['^'] = 0b01101110;
	LCM1602C_CHARSET['_'] = 0b01101111;

	LCM1602C_CHARSET['`'] = 0b01010000;
	LCM1602C_CHARSET['a'] = 0b01010001;
	LCM1602C_CHARSET['b'] = 0b01010010;
	LCM1602C_CHARSET['c'] = 0b01010011;
	LCM1602C_CHARSET['d'] = 0b01010100;
	LCM1602C_CHARSET['e'] = 0b01010101;
	LCM1602C_CHARSET['f'] = 0b01010110;
	LCM1602C_CHARSET['g'] = 0b01010111;
	LCM1602C_CHARSET['h'] = 0b01011000;
	LCM1602C_CHARSET['i'] = 0b01011001;
	LCM1602C_CHARSET['j'] = 0b01011010;
	LCM1602C_CHARSET['k'] = 0b01011011;
	LCM1602C_CHARSET['l'] = 0b01011100;
	LCM1602C_CHARSET['m'] = 0b01011101;
	LCM1602C_CHARSET['n'] = 0b01011110;
	LCM1602C_CHARSET['o'] = 0b01011111;

	LCM1602C_CHARSET['p'] = 0b01110000;
	LCM1602C_CHARSET['q'] = 0b01110001;
	LCM1602C_CHARSET['r'] = 0b01110010;
	LCM1602C_CHARSET['s'] = 0b01110011;
	LCM1602C_CHARSET['t'] = 0b01110100;
	LCM1602C_CHARSET['u'] = 0b01110101;
	LCM1602C_CHARSET['v'] = 0b01110110;
	LCM1602C_CHARSET['w'] = 0b01110111;
	LCM1602C_CHARSET['x'] = 0b01111000;
	LCM1602C_CHARSET['y'] = 0b01111001;
	LCM1602C_CHARSET['z'] = 0b01111010;
	LCM1602C_CHARSET['{'] = 0b01111011;
	LCM1602C_CHARSET['|'] = 0b01111100;
	LCM1602C_CHARSET['}'] = 0b01111101;
	//LCM1602C_CHARSET['→'] = 0b01111110;
	//LCM1602C_CHARSET['←'] = 0b01111111;
	LCM1602C_CHARSET['D'] = 0b01000100;
	LCM1602C_CHARSET['E'] = 0b01000101;
	LCM1602C_CHARSET['F'] = 0b01000110;
	LCM1602C_CHARSET['G'] = 0b01000111;
	LCM1602C_CHARSET['H'] = 0b01001000;
	LCM1602C_CHARSET['I'] = 0b01001001;
	LCM1602C_CHARSET['J'] = 0b01001010;
	LCM1602C_CHARSET['K'] = 0b01001011;
	LCM1602C_CHARSET['L'] = 0b01001100;
	LCM1602C_CHARSET['M'] = 0b01001101;
	LCM1602C_CHARSET['N'] = 0b01001110;
	LCM1602C_CHARSET['O'] = 0b01001111;

	LCM1602C_CHARSET['P'] = 0b01100000;
	LCM1602C_CHARSET['Q'] = 0b01100001;
	LCM1602C_CHARSET['R'] = 0b01100010;
	LCM1602C_CHARSET['S'] = 0b01100011;
	LCM1602C_CHARSET['T'] = 0b01100100;
	LCM1602C_CHARSET['U'] = 0b01100101;
	LCM1602C_CHARSET['V'] = 0b01100110;
	LCM1602C_CHARSET['W'] = 0b01100111;
	LCM1602C_CHARSET['X'] = 0b01101000;
	LCM1602C_CHARSET['Y'] = 0b01101001;
	LCM1602C_CHARSET['Z'] = 0b01101010;
	LCM1602C_CHARSET['['] = 0b01101011;
	//LCM1602C_CHARSET['¥'] = 0b01101100;
	LCM1602C_CHARSET[']'] = 0b01101101;
	LCM1602C_CHARSET['^'] = 0b01101110;
	LCM1602C_CHARSET['_'] = 0b01101111;

	LCM1602C_CHARSET['`'] = 0b01010000;
	LCM1602C_CHARSET['a'] = 0b01010001;
	LCM1602C_CHARSET['b'] = 0b01010010;
	LCM1602C_CHARSET['c'] = 0b01010011;
	LCM1602C_CHARSET['d'] = 0b01010100;
	LCM1602C_CHARSET['e'] = 0b01010101;
	LCM1602C_CHARSET['f'] = 0b01010110;
	LCM1602C_CHARSET['g'] = 0b01010111;
	LCM1602C_CHARSET['h'] = 0b01011000;
	LCM1602C_CHARSET['i'] = 0b01011001;
	LCM1602C_CHARSET['j'] = 0b01011010;
	LCM1602C_CHARSET['k'] = 0b01011011;
	LCM1602C_CHARSET['l'] = 0b01011100;
	LCM1602C_CHARSET['m'] = 0b01011101;
	LCM1602C_CHARSET['n'] = 0b01011110;
	LCM1602C_CHARSET['o'] = 0b01011111;

	LCM1602C_CHARSET['p'] = 0b01110000;
	LCM1602C_CHARSET['q'] = 0b01110001;
	LCM1602C_CHARSET['r'] = 0b01110010;
	LCM1602C_CHARSET['s'] = 0b01110011;
	LCM1602C_CHARSET['t'] = 0b01110100;
	LCM1602C_CHARSET['u'] = 0b01110101;
	LCM1602C_CHARSET['v'] = 0b01110110;
	LCM1602C_CHARSET['w'] = 0b01110111;
	LCM1602C_CHARSET['x'] = 0b01111000;
	LCM1602C_CHARSET['y'] = 0b01111001;
	LCM1602C_CHARSET['z'] = 0b01111010;
	LCM1602C_CHARSET['{'] = 0b01111011;
	LCM1602C_CHARSET['|'] = 0b01111100;
	LCM1602C_CHARSET['}'] = 0b01111101;
	//LCM1602C_CHARSET['→'] = 0b01111110;
	//LCM1602C_CHARSET['←'] = 0b01111111;
}
